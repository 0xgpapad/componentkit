(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{168:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(11),i=(n(0),n(209)),o={title:"Advanced Views"},c={id:"advanced-views",title:"Advanced Views",description:"Back in Views we glossed over CKComponentViewClass and CKComponentViewAttribute. But there's a surprising amount of power hiding here!",source:"@site/docs/advanced-views.md",permalink:"/docs/advanced-views",sidebar:"docs",previous:{title:"Why C++",permalink:"/docs/why-cpp"},next:{title:"Component Context",permalink:"/docs/component-context"}},s=[],l={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Back in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/views"}),"Views")," we glossed over ",Object(i.b)("inlineCode",{parentName:"p"},"CKComponentViewClass")," and ",Object(i.b)("inlineCode",{parentName:"p"},"CKComponentViewAttribute"),". But there's a surprising amount of power hiding here!"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"CKComponentViewClass")," describes how to create a ",Object(i.b)("inlineCode",{parentName:"p"},"UIView"),". Usually you pass an Objective-C class like ",Object(i.b)("inlineCode",{parentName:"p"},"[UIImageView class]"),", and ComponentKit will automatically create a view by invoking the designated initializer ",Object(i.b)("inlineCode",{parentName:"p"},"-initWithFrame:"),"."),Object(i.b)("p",null,"But of course, not all views can be created with ",Object(i.b)("inlineCode",{parentName:"p"},"-initWithFrame:"),". For these cases, there's an advanced constructor that takes a function pointer:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),"CKComponentViewClass(UIView *(*factory)(void));\n")),Object(i.b)("p",null,"This allows you to use almost any view with ComponentKit. Here's one example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),'static UIView *authorViewForOscarWilde(void) {\n  return [[AuthorView alloc] initWithName:@"Oscar Fingal O\'Flahertie Wills Wilde"];\n}\n// ...\n[CKComponent newWithView:{&authorViewForOscarWilde} size:{50, 50}]\n')),Object(i.b)("div",{class:"note-important"},Object(i.b)("p",null,"However, the factory takes no arguments; you can't pass any properties from a particular component to a view's ",Object(i.b)("inlineCode",{parentName:"p"},"-init"),", since views must be arbitrarily recycled between components. If your view takes properties in ",Object(i.b)("inlineCode",{parentName:"p"},"-init"),", one possible pattern is to create a wrapping view with setter methods that tear down and re-create the problematic view as a subview.")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"CKComponentViewAttribute")," has similar underpinnings. Usually you pass a ",Object(i.b)("inlineCode",{parentName:"p"},"SEL"),", but under the hood they're basically just arbitrary blocks paired with a unique identifier:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),"struct CKComponentViewAttribute {\n  std::string identifier;\n  void (^applicator)(id view, id value);\n  void (^unapplicator)(id view, id value);\n  void (^updater)(id view, id oldValue, id newValue);\n};\n")),Object(i.b)("p",null,'This allows you to express arbitrarily complex operations on the view, like "call this method with these N arguments". The only restriction is that you must box up the inputs to the block in a single ',Object(i.b)("inlineCode",{parentName:"p"},"id")," so ComponentKit can determine if it has changed across recyclings."),Object(i.b)("div",{class:"note"},Object(i.b)("p",null,"How does passing a ",Object(i.b)("inlineCode",{parentName:"p"},"Class")," or ",Object(i.b)("inlineCode",{parentName:"p"},"SEL")," work for these classes? They each have a single-argument constructor that takes a ",Object(i.b)("inlineCode",{parentName:"p"},"Class"),"/",Object(i.b)("inlineCode",{parentName:"p"},"SEL")," and creates an object that creates the right thing. C++ implicitly calls this constructor when you pass a ",Object(i.b)("inlineCode",{parentName:"p"},"Class"),"/",Object(i.b)("inlineCode",{parentName:"p"},"SEL"),".")))}p.isMDXComponent=!0},209:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,m=b["".concat(o,".").concat(d)]||b[d]||u[d]||i;return n?r.a.createElement(m,c({ref:t},l,{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);