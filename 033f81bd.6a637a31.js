(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{150:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(11),o=(n(0),n(219)),c={title:"Changeset API"},i={id:"datasource-changeset-api",title:"Changeset API",description:'Changesets are how you interact with the datasource. They allow you to "enqueue" sets of commands to be processed by the datasource.',source:"@site/docs/datasource-changeset-api.md",permalink:"/docs/datasource-changeset-api",sidebar:"docs",previous:{title:"Basics",permalink:"/docs/datasource-basics"},next:{title:"Gotchas",permalink:"/docs/datasource-gotchas"}},s=[{value:"Order in which changes are applied.",id:"order-in-which-changes-are-applied",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,'Changesets are how you interact with the datasource. They allow you to "enqueue" sets of commands to be processed by the datasource.'),Object(o.b)("p",null,"These commands can be seen as a sentence with three parts :"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"action")," (insert/delete/udpate for items, insert/delete for sections)"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"position specifier")," (indexPath for items, index for sections)"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"model")," (that will be used to compute the components)")),Object(o.b)("p",null,"Here is some sample code, showing how to create a changeset - As you can see changesets are a c++ structure."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-objectivec"}),'CKArrayControllerInputItems items;\n// Insert an item at index 0 in section 0 and compute the component for the model @"Hello"\nitems.insert({0, 0}, @"Hello");\n// Update the item at index 1 in section 0 and update it with the component computed for the model @"World"\nitems.update({0, 1}, @"World");\n// Delete the item at index 2 in section 0, no need for a model here :)\nitems.delete({0, 2});\n\nSections sections;\nsections.insert(0);\nsections.insert(2);\nsections.insert(3);\n\n[datasource enqueueChangeset:{sections, items}];\n')),Object(o.b)("p",null,"Changes can also be created from ",Object(o.b)("inlineCode",{parentName:"p"},"NSIndexPaths")," :"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-objectivec"}),'CKArrayControllerInputItems items;\nNSIndexPath *insertionIndexPath = [NSIndexPath indexPathForItem:0 inSection:0];\nitems.insert({insertionIndexPath}, @"Hello");\n')),Object(o.b)("p",null,"You can even get rid of the brackets around the ",Object(o.b)("inlineCode",{parentName:"p"},"NSIndexPath"),", thanks to ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"http://en.cppreference.com/w/cpp/language/converting_constructor"}),"C++ converting constructors")," :"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-objectivec"}),'CKArrayControllerInputItems items;\nNSIndexPath *insertionIndexPath = [NSIndexPath indexPathForItem:0 inSection:0];\nitems.insert(insertionIndexPath, @"Hello");\n')),Object(o.b)("h2",{id:"order-in-which-changes-are-applied"},"Order in which changes are applied."),Object(o.b)("div",{class:"note-important"},Object(o.b)("p",null,"The order in which commands are added to the changeset doesn't define the order in which those changes will eventually be applied to the ",Object(o.b)("inlineCode",{parentName:"p"},"UICollectionView")," (same for ",Object(o.b)("inlineCode",{parentName:"p"},"UITableViews"),").")),Object(o.b)("p",null,"Be wary of this fact while computing a changeset, the conventions defined in Cocoa for batch updates are as follows:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Deletions and Updates are applied first using the current index space.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Insertions are then applied in the post deletions index space (updates obviously won't modify the index space)."))),Object(o.b)("p",null,"You can consult the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/TableView_iPhone/ManageInsertDeleteRow/ManageInsertDeleteRow.html"}),"following section")," in the Apple documentation to get more information."))}p.isMDXComponent=!0},219:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},d=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),b=r,h=d["".concat(c,".").concat(b)]||d[b]||u[b]||o;return n?a.a.createElement(h,i({ref:t},l,{components:n})):a.a.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=b;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);