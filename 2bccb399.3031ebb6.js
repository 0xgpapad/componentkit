(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{162:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(2),o=t(11),i=(t(0),t(207)),r=t(209),c={title:"Debugging"},l={id:"debugging",title:"Debugging",description:"When working with ComponentKit, you would generally uses generic views such as UIButton, UIImageView, etc. under the hood. Hence, when you run a command in the LLDB debugger like Chisel's pviews you'll see a generic view hierarchy with no information about components. The following is the output of running pviews for an application using ComponentKit.",source:"@site/docs/debugging.md",permalink:"/docs/debugging",sidebar:"docs",previous:{title:"Lifecycle Methods",permalink:"/docs/lifecycle-methods"},next:{title:"General Principles",permalink:"/docs/animations-general-principles"}},s=[{value:"Print Component Hierarchy",id:"print-component-hierarchy",children:[{value:"<code>pcomponents</code>",id:"pcomponents",children:[]}]},{value:"Visually Debug Components",id:"visually-debug-components",children:[{value:"<code>dcomponents</code>",id:"dcomponents",children:[]},{value:"Xcode Debug View Hierachy / Reveal Integration",id:"xcode-debug-view-hierachy--reveal-integration",children:[]}]}],b={rightToc:s};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"When working with ComponentKit, you would generally uses generic views such as ",Object(i.b)("inlineCode",{parentName:"p"},"UIButton"),", ",Object(i.b)("inlineCode",{parentName:"p"},"UIImageView"),", etc. under the hood. Hence, when you run a command in the LLDB debugger like ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.github.com/facebook/chisel"}),"Chisel's")," ",Object(i.b)("inlineCode",{parentName:"p"},"pviews")," you'll see a generic view hierarchy with no information about components. The following is the output of running ",Object(i.b)("inlineCode",{parentName:"p"},"pviews")," for an application using ComponentKit."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"| <UICollectionView: 0x7caf3800; frame = (0 0; 320 568); clipsToBounds = YES; autoresize = W+H; gestureRecognizers = <NSArray: 0x7b462e50>; layer = <CALayer: 0x7b462a80>; contentOffset: {0, 315}; contentSize: {320, 5951}> collection view layout: <UICollectionViewFlowLayout: 0x7ae60ab0>\n|    | <UICollectionViewCell: 0x7b1b9e00; frame = (0 0; 320 496.5); layer = <CALayer: 0x7b1b9fa0>>\n|    |    | <UIView: 0x7b1ba150; frame = (0 0; 320 496.5); gestureRecognizers = <NSArray: 0x7b06f360>; layer = <CALayer: 0x7b1ba1c0>>\n|    |    |    | <UIView: 0x7b1ba8d0; frame = (0 0; 320 496.5); gestureRecognizers = <NSArray: 0x7b1baed0>; layer = <CALayer: 0x7b1ba940>>\n|    |    |    |    | <UIImageView: 0x7b1bb220; frame = (0 0; 320 496); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x7b1bb2a0>>\n|    |    |    |    | <CKTextComponentView: 0x7ae61820; baseClass = UIControl; frame = (20.5 70; 278.5 240.5); userInteractionEnabled = NO; layer = <CKTextComponentLayer: 0x7ae61da0>>\n|    |    |    |    | <CKTextComponentView: 0x7ae71820; baseClass = UIControl; frame = (230.5 310.5; 64.5 160.5); userInteractionEnabled = NO; layer = <CKTextComponentLayer: 0x7ae640f0>>\n|    |    |    |    | <UIView: 0x7ae72670; frame = (0 496; 320 0.5); layer = <CALayer: 0x7ae726e0>>\n...................................\n|    | <UICollectionViewCell: 0x7b1b6040; frame = (0 852; 320 416.5); layer = <CALayer: 0x7b1a8990>>\n|    |    | <UIView: 0x7b1b0600; frame = (0 0; 320 416.5); gestureRecognizers = <NSArray: 0x7b1ac610>; layer = <CALayer: 0x7b1b93f0>>\n|    |    |    | <UIView: 0x7b1a6530; frame = (0 0; 320 416.5); gestureRecognizers = <NSArray: 0x7b1aa1d0>; layer = <CALayer: 0x7b1a65a0>>\n|    |    |    |    | <UIImageView: 0x7b1b6cf0; frame = (0 0; 320 416); clipsToBounds = YES; opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x7b1b6d70>>\n|    |    |    |    | <CKTextComponentView: 0x7b1b86c0; baseClass = UIControl; frame = (30 133; 260 150.5); userInteractionEnabled = NO; layer = <CKTextComponentLayer: 0x7b1b8750>>\n|    |    |    |    | <UIView: 0x7ae735e0; frame = (0 416; 320 0.5); layer = <CALayer: 0x7ae74cd0>>\n|    | <UIImageView: 0x7b4665f0; frame = (313 565.5; 7 2.5); alpha = 0; opaque = NO; autoresize = TM; userInteractionEnabled = NO; layer = <CALayer: 0x7b466900>>\n|    | <UIImageView: 0x7b466e30; frame = (314.5 413.5; 2.5 47); alpha = 0; opaque = NO; autoresize = LM; userInteractionEnabled = NO; layer = <CALayer: 0x7b466eb0>>\n")),Object(i.b)("p",null,"ComponentKit includes a set of debugging tools that help you debug component hierarchies and has strong integration with  ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.github.com/facebook/chisel"}),"Chisel"),". Clone the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.github.com/facebook/chisel"}),"github repo")," of Chisel and install it to enable the latest commands."),Object(i.b)("div",{class:"note-important"},Object(i.b)("p",null,"The following functionality is intended for debugging only and is not suitable for use in production.")),Object(i.b)("h2",{id:"print-component-hierarchy"},"Print Component Hierarchy"),Object(i.b)("p",null,"Type the following in the debugger to print the component hierarchy:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"(lldb) po [CKComponentHierarchyDebugHelper componentHierarchyDescription]\n")),Object(i.b)("p",null,"This includes layout information like position and size. It is designed to be analogous to how ",Object(i.b)("inlineCode",{parentName:"p"},"pviews")," works. It is the easiest way to reason about where your layout might have gone wrong while looking at the component rendered on screen."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"For View: <UIView: 0x7b249f70; frame = (0 0; 320 355.5); gestureRecognizers = <NSArray: 0x7b544aa0>; layer = <CALayer: 0x7b249fe0>>\n<InteractiveQuoteComponent: 0x7ae6f710>, Position: {0, 0}, Size: {320, 355.5}\n| <CKFlexboxComponent: 0x7ae6f670>, Position: {0, 0}, Size: {320, 355.5}\n| | <MonochromeQuoteComponent: 0x7ae6f380>, Position: {0, 0}, Size: {320, 355}\n| | | <QuoteBackgroundComponent: 0x7ae6f330>, Position: {0, 0}, Size: {320, 355}\n| | | | <CKBackgroundLayoutComponent: 0x7ae6f2e0>, Position: {0, 0}, Size: {320, 355}\n| | | | | <CKComponent: 0x7ae6f290>, Position: {0, 0}, Size: {320, 355}\n| | | | | <CKInsetComponent: 0x7ae6d6c0>, Position: {0, 0}, Size: {320, 355}\n| | | | | | <CKBackgroundLayoutComponent: 0x7ae6d670>, Position: {0, 40}, Size: {280, 275}\n| | | | | | | <CKComponent: 0x7ae6d620>, Position: {0, 0}, Size: {280, 275}\n| | | | | | | <CKFlexboxComponent: 0x7ae6d4b0>, Position: {0, 0}, Size: {280, 275}\n| | | | | | | | <CKComponent: 0x7ae6b500>, Position: {10, 0}, Size: {20, 40}\n| | | | | | | | <CKInsetComponent: 0x7ae6d450>, Position: {30, 0}, Size: {250, 275}\n| | | | | | | | | <CKLabelComponent: 0x7ae6d400>, Position: {20, 50}, Size: {210, 175}\n| | | | | | | | | | <CKTextComponent: 0x7ae6d380>, Position: {0, 0}, Size: {210, 175}\n| | <CKComponent: 0x7ae6f5e0>, Position: {0, 355}, Size: {320, 0.5}\n")),Object(i.b)("p",null,"Optionally you can use:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"(lldb) po [CKComponentHierarchyDebugHelper componentHierarchyDescriptionForView:0x7be52100 searchUpwards:NO]\n")),Object(i.b)("p",null,"This method takes in a view from where to begin its search and the search can be upwards as well, as shown in this case, it traverses up to find the first view on which there's a component hierarchy attached. Note that this works by finding the view at which the root component is attached and then printing the view hierarchy from there downwards."),Object(i.b)("div",{class:"note"},Object(i.b)("p",null,"Generally, if you run this helper you will be presented with multiple component hierarchies, one each for each visible cell. To get the component hierarchy for the cell you're interested in, type ",Object(i.b)("inlineCode",{parentName:"p"},"taplog")," on the console and click on a view in the cell you're interested in - ",Object(i.b)("inlineCode",{parentName:"p"},"taplog")," would give you the memory address of that view, which you can copy. Then you can use the helper method with the search upwards functionality to get the hierarchy for the cell you are interested in.")),Object(i.b)("h3",{id:"pcomponents"},Object(i.b)("inlineCode",{parentName:"h3"},"pcomponents")),Object(i.b)("p",null,"To make this easier, we have a LLDB command in Chisel called ",Object(i.b)("inlineCode",{parentName:"p"},"pcomponents"),", which is a convenient way to print the component hierachy. Utilizing LLDB's prefix matching, you can even shorten that to ",Object(i.b)("inlineCode",{parentName:"p"},"pco"),"."),Object(i.b)("p",null,"Optionally, it can take a view and also search upwards using the ",Object(i.b)("inlineCode",{parentName:"p"},"-u")," flag."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"(lldb) pco -u <view>\n")),Object(i.b)("h2",{id:"visually-debug-components"},"Visually Debug Components"),Object(i.b)("p",null,"ComponentKit has helpers to set up debug views, which are phantom views for components which usually wouldn't create any view. To enable debug mode:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"(lldb) e (void)[CKComponentDebugController setDebugMode:YES]\n")),Object(i.b)("p",null,"Looking through the view hierarchy gives a visual manifestation to layout and can be useful for debugging. Executing the ",Object(i.b)("inlineCode",{parentName:"p"},"pviews")," command will now give us a set of views which have the suffix ",Object(i.b)("inlineCode",{parentName:"p"},"View_Debug")," which denote phantom component views, we gives a sense of the component hierarchy in the view hierarchy itself, since the phantom views generated have their backing components name as their prefix."),Object(i.b)("p",null,"To unset, just ",Object(i.b)("inlineCode",{parentName:"p"},"setDebugMode:NO")," instead."),Object(i.b)("h3",{id:"dcomponents"},Object(i.b)("inlineCode",{parentName:"h3"},"dcomponents")),Object(i.b)("p",null,"Again, we simplify the debug view helper using a LLDB command in Chisel - ",Object(i.b)("inlineCode",{parentName:"p"},"dcomponents"),"."),Object(i.b)("p",null,"To enable debug view mode:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"(lldb) dc -s\n")),Object(i.b)("p",null,"and to disable:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"(lldb) dc -u\n")),Object(i.b)("h3",{id:"xcode-debug-view-hierachy--reveal-integration"},"Xcode Debug View Hierachy / Reveal Integration"),Object(i.b)("p",null,"This helper really shines when you can actually see the view hierarchy, be it in Xcode or ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://revealapp.com/"}),"Reveal")),Object(i.b)("p",null,"If you use the the Xcode's default ",Object(i.b)("em",{parentName:"p"},"Debug View Hierarchy")," tool to see the individual views:"),Object(i.b)("img",{src:Object(r.a)("assets/xcode-debug.png"),alt:"Debug Components with Xcode"}),Object(i.b)("p",null,"Or you can use ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://revealapp.com/"}),"Reveal"),":"),Object(i.b)("img",{src:Object(r.a)("assets/reveal-debug.png"),alt:"Debug Components with Reveal"}))}p.isMDXComponent=!0},207:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var a=t(0),o=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),b=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c({},n,{},e)),t},p=function(e){var n=b(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},h=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(t),h=a,d=p["".concat(r,".").concat(h)]||p[h]||u[h]||i;return t?o.a.createElement(d,c({ref:n},s,{components:t})):o.a.createElement(d,c({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=h;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var s=2;s<i;s++)r[s]=t[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},208:function(e,n,t){"use strict";var a=t(0),o=t(59);n.a=function(){return Object(a.useContext)(o.a)}},209:function(e,n,t){"use strict";t.d(n,"a",(function(){return o}));t(210);var a=t(208);function o(e){var n=(Object(a.a)().siteConfig||{}).baseUrl,t=void 0===n?"/":n;if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?t+e.slice(1):t+e}},210:function(e,n,t){"use strict";var a=t(8),o=t(10),i=t(211),r="".startsWith;a(a.P+a.F*t(212)("startsWith"),"String",{startsWith:function(e){var n=i(this,e,"startsWith"),t=o(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),a=String(e);return r?r.call(n,a,t):n.slice(t,t+a.length)===a}})},211:function(e,n,t){var a=t(86),o=t(30);e.exports=function(e,n,t){if(a(n))throw TypeError("String#"+t+" doesn't accept regex!");return String(o(e))}},212:function(e,n,t){var a=t(3)("match");e.exports=function(e){var n=/./;try{"/./"[e](n)}catch(t){try{return n[a]=!1,!"/./"[e](n)}catch(o){}}return!0}}}]);