(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{205:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var o=n(2),r=n(11),a=(n(0),n(225)),i={title:"UI Context"},c={id:"infrastructure/fb/uicontext",title:"UI Context",description:"When building a new surface we think in function of the model and context that in input to the render method invoked  over time due to a user interaction or system event.",source:"@site/docs/infrastructure/fb/uicontext.md",permalink:"/docs/infrastructure/fb/uicontext"},l=[{value:"Read from the UI Component Context",id:"read-from-the-ui-component-context",children:[{value:"Component Spec",id:"component-spec",children:[]},{value:"Components API",id:"components-api",children:[]}]},{value:"Write onto the UI context",id:"write-onto-the-ui-context",children:[]},{value:"Accessibility Update",id:"accessibility-update",children:[]},{value:"Plug and play",id:"plug-and-play",children:[]}],s={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"When building a new surface we think in function of the model and context that in input to the render method invoked  over time due to a user interaction or system event."),Object(a.b)("p",null,"Although this is how ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/animations-general-principles"}),"react-inspired frameworks recommend to write UI"),", there are certain events, that rather than belonging solely to our data dependency, are actually a representation of a change affecting the whole hosting ",Object(a.b)("em",{parentName:"p"},"environment")," and ",Object(a.b)("strong",{parentName:"p"},"not just")," the surface we are building."),Object(a.b)("p",null,"The ",Object(a.b)("strong",{parentName:"p"},"UIContext")," is responsible to give you access (and override when necessary) any features that belongs to the current environment such as: theming, trait collection, accessibility status and so on."),Object(a.b)("h2",{id:"read-from-the-ui-component-context"},"Read from the UI Component Context"),Object(a.b)("p",null,"As consumer of this API you are mostly interested to read the ",Object(a.b)("strong",{parentName:"p"},"UIContext")," and not directly write onto it. Making sure the ",Object(a.b)("em",{parentName:"p"},"UIContext")," stays up to date is guaranteed by the infrastructure as long as your surface depends on infra view controllers (e.g. ",Object(a.b)("em",{parentName:"p"},"FBComponentViewController"),", ",Object(a.b)("em",{parentName:"p"},"FBSurfaceViewController"),")."),Object(a.b)("p",null,"For any relevant environment context update a new value is pushed onto the component/sections hierarchy before it gets completely reflow."),Object(a.b)("p",null,"To access the context you can invoke it directly from your render function as following"),Object(a.b)("h3",{id:"component-spec"},"Component Spec"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-objc"}),"#import <FBUIComponentContext/FBUIComponentContext.h>\n\n...\n\nnamespace MyAwesomeComponentSpec {\n\nCK_RENDER\nCKComponent *render(const Props &props){\n  auto const traitCollection = CK::UIContext::getTraitCollection();\n  auto const theme = CK::UIContext::getTheme();\n\n  return FBLabelTextComponent({\n    .string = DescriptionForTraitCollection(traitCollection),\n    .color = FDS::UsageColor(FDS::UsageColor::PrimaryText, theme)\n  });\n}\n")),Object(a.b)("h3",{id:"components-api"},"Components API"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-objc"}),"#import <FBUIComponentContext/FBUIComponentContext.h>\n\n...\n\n@implementation MyAwesomeComponent {\n\n  + (instancetype)new\n  {\n    auto const traitCollection = CK::UIContext::getTraitCollection();\n    auto const theme = CK::UIContext::getTheme();\n    return [super newWithComponent: FBLabelTextComponent({\n      .string = DescriptionForTraitCollection(traitCollection),\n      .color = FDS::UsageColor(FDS::UsageColor::PrimaryText, theme)\n    });]\n  }\n\n}\n")),Object(a.b)("div",{class:"note"},Object(a.b)("p",null,"In case you can't rely on ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html"}),"view controller containment API")," to build your surface, you'll have to manually guarantee the right UIContext instance is available accordingly to the received events.")),Object(a.b)("h2",{id:"write-onto-the-ui-context"},"Write onto the UI context"),Object(a.b)("p",null,"In case you need to override a received UIContext instance or you need to build your own integration with the UIContext, the API also supports a writer access that allows you to override the available instance that is available to the current component hierarchy to build."),Object(a.b)("p",null,"Every UIContext instance lives in the scope of a component hierarchy generation. It should be generated before initializing the very first component of our hierarchy and it will automatically disappear once the hierarchy has been built (all the components have been processed their initializer/render function)."),Object(a.b)("p",null,"As maintainer of the UIContext for your surface you are responsible to properly react to all changes that are delivered by the system and that are relevant to what we store in the UIContext. A change in the current trait collection for instance ",Object(a.b)("strong",{parentName:"p"},"must")," trigger a new component hierarchy generation (a.k.a. trigger state update or context update) by making sure the UIContext is later pushed before generation:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-objc"}),"// Callback delivered by UIKit every time **anything** in the trait collection has changed\n- (void)traitCollectionDidChange:(UITraitCollection *)previousTraitCollection\n{\n  [super traitCollectionDidChange:previousTraitCollection];\n  auto const uiComponentContext = [FBUIComponentContext\n                                    newWithTraitCollection:self.traitCollection\n                                                     theme:self.fb_theme\n                                       accessibilityStatus:_accessibilityStatus];\n\n  // Update the hosting view current model that will be passed to the component generator function.\n  [_hostingView updateModel:\n   [[MyAwesomeModel alloc]\n    initWithUIComponentContext:uiComponentContext\n    mode:CKUpdateModeAsynchronous];\n\n  // Reflow the new UIContext  The consequential update model and reload will be batched together by the infra.\n  [_hostingView reloadWithMode:CKUpdateModeAsynchronous];\n}\n\n#pragma mark - CKComponentProvider\n\nstatic auto componentForModel:(id<NSObject> model, id<NSObject> context) -> CKComponent *\n{\n  auto const model = CK::objCForceCast<MyAwesomeModel>(model);\n\n  // Push the UI component context prior to component generation\n  CK::UIContext u(model.uiComponentContext);\n\n  // Build and return your component hierarchy\n  return ...;\n}\n\n")),Object(a.b)("h2",{id:"accessibility-update"},"Accessibility Update"),Object(a.b)("p",null,"In order to update the ",Object(a.b)("inlineCode",{parentName:"p"},"UIContext")," to be in sync with accessibility status the best way is to have your UIViewController subclass conforms to ",Object(a.b)("inlineCode",{parentName:"p"},"FBAccessibilityInvalidationEventsListener")," and update the context in one of the listener callbacks."),Object(a.b)("div",{class:"note-important"},Object(a.b)("p",null,"Because of an issue (or a feature) with Apple Accessibility notifications the callbacks can be triggered multiple times for the same event, so adding a check before modifying the ",Object(a.b)("inlineCode",{parentName:"p"},"UIContext")," can prevent multiple reflows.")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example:")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-objc"}),"@interface MYAwesomeViewController () <FBAccessibilityInvalidationEventsListener>\n...\n- (void)viewDidLoad {\n  [super viewDidLoad];\n  FBAddAccessibilityInvalidationEventsListener(self);\n  ...\n}\n\n#pragma mark - Accessibility Update\n\n- (void)didReceiveAccessibilityInvalidation\n{\n  if (_accessibilityEnabled != CK::Component::Accessibility::IsAccessibilityEnabled()) {\n    _accessibilityEnabled = CK::Component::Accessibility::IsAccessibilityEnabled();\n    auto const uiComponentContext = [FBUIComponentContext\n                                    newWithTraitCollection:self.traitCollection\n                                                     theme:self.fb_theme\n                                       accessibilityStatus:_accessibilityStatus];\n    // Update the hosting view current model that will be passed to the component generator function.\n    [_hostingView updateModel:\n     [[MyAwesomeModel alloc]\n      initWithUIComponentContext:uiComponentContext\n      mode:CKUpdateModeAsynchronous];\n\n    [_hostingView updateAccessibilityStatus:_accessibilityEnabled mode:CKUpdateModeSynchronous];\n  }\n}\n")),Object(a.b)("h2",{id:"plug-and-play"},"Plug and play"),Object(a.b)("p",null,"You can quickly play with the context API through our Playground app:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-shell"}),"$ arc playground UIContextShowcase\n")))}p.isMDXComponent=!0},225:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},u=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,m=u["".concat(i,".").concat(d)]||u[d]||b[d]||a;return n?r.a.createElement(m,c({ref:t},s,{components:n})):r.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);